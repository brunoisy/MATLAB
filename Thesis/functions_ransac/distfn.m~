function [inliers, Lc] = distfn(Lc, x, thresh)
%DISTFN Summary of this function goes here
%   Detailed explanation goes here

thresh = thresh(1);

X = x(1,:);
F = x(2,:);

admissX = X(X<Lc);
admissF = F(X<Lc);

inliers = 1:length(X);
inliers = inliers(X < Lc);
inliers = 
inliers(X<Lc) = abs(admissF-fd(Lc, admissX)) < thresh;

for i=1:length(inliers)
   if inliers(i) == 0
       inliers(i:end) = zeros(1,length(inliers)-i+1);
       break
   end
end


% inliers = zeros(1,length(X)) & zeros(1,length(X));
% inliers(X<Lc) = abs(admissF-fd(Lc, admissX))<thresh;
% %inliers(X<Lc) = admissF < fd(Lc, admissX) + thresh;
% 
% 
% if(any(inliers)) % We impose approximate time consistency
%     plop = find(inliers);
%     firstinlier = plop(1);
%     k = 0;
%     for i = firstinlier:length(inliers)-1
%         if k>3
%             inliers((i-k):end) = zeros(1,length(inliers)-(i-k-1)); % then all inliers after the breaking of time consistency are removed
%             break
%         elseif (inliers(i) == 0)% i.e. time consistency is violated
%             if(F(i) > fd(Lc, X(i)))
%                 k = k+1;
%             end
%         else
%             k = 0;
%         end
%     end
% end

% inliers = zeros(1,length(X)) & zeros(1,length(X));
% inliers(X<Lc) = abs(admissF-fd(Lc, admissX))<thresh;

% inlowthreshX = admissX(abs(admissF-fd(Lc, admissX))<lowthresh);
% if(isempty(inlowthreshX))
%     inliers = zeros(1,length(X));
% else
%     Xfirst = inlowthreshX(1);
%     
%     outhighthreshX = admissX(abs(admissF-fd(Lc, admissX))>highthresh);
%     outhighthreshX = outhighthreshX(outhighthreshX>inlowthreshX(1));
%     if(isempty(outhighthreshX))
%         Xlast = admissX(end);
%     else
%         Xlast= outhighthreshX(1);
%     end
%     inliers = Xfirst<=X & X<Xlast;
% end


end