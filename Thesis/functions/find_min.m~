function [ goodmins ] = find_min(dist, force)
%FINDMIN Summary of this function goes here
%   Detailed explanation goes here

nmin = 0;% # of minimas found
mins = zeros(2, length(dist));
hi = 20;% size of half comparison interval...

% We find candidate minimas by comparing points to their 2*hi neighbors
% ! danger, risk of missing first minima
for i=1+hi:length(force)-hi
    if force(i) < min([force(i-hi:i-1),force(i+1:i+hi)])
        nmin = nmin+1;
        mins(:,nmin) = [dist(i); force(i)]
    end
end

% We know try to remove the 'noisy' minimas
goodmins = zeros(2,maxmin);
goodmins(:,1) = mins(:,1);
ngoodmins = 1;
k = 0.6;
for i = 2:nmin
    mean(goodmins(2,1:(i-1)))
    if (mins(2,i) < k*mean(goodmins(2,1:(i-1))))
        ngoodmins = ngoodmins+1;
        goodmins(:,ngoodmins) = mins(:,i);
    end
end

goodmins = goodmins(:,1:ngoodmins);



% if(nargin <4)
%     fthresh = 25*10^-12;% min abs value of force for a candidate to be considered a minima
% end
% nmin = 0;% # of minimas found
% mins = zeros(2, maxmin);
% hi = 20;% size of half comparison interval...
% 
% 
% for i=1+hi:length(force)-hi
%     if ( (force(i) < min([force(i-hi:i-1),force(i+1:i+hi)])) && (force(i) < -fthresh))
%         nmin = nmin+1;
%         mins(:,nmin) = [dist(i); force(i)];
%         if(nmin >= maxmin)
%             break
%         end
%     end
% end
% mins = mins(:,1:nmin);

end